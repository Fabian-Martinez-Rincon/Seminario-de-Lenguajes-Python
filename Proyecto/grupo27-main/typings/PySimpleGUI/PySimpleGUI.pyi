"""
This type stub file was generated by pyright.
"""

import tkinter as tk
import datetime
from tkinter import ttk
from typing import Any, Optional, Sequence, TypedDict

version = ...
_change_log = ...
__version__ = ...
port = ...
tclversion_detailed = ...
framework_version = ...
g_time_start = ...
g_time_end = ...
g_time_delta = ...
def timer_start(): # -> None:
    """
    Time your code easily.... """
    ...

def timer_stop(): # -> int:
    """
    Time your code easily.... """
    ...

_timeit_counter = ...
MAX_TIMEIT_COUNT = ...
_timeit_total = ...
def running_linux(): # -> bool:
    """
    Determines the OS is Linux"""
    ...

def running_mac(): # -> bool:
    """
    Determines the OS is Mac b"""
    ...

def running_windows() -> bool:
    """
    Determines the OS is Windo"""
    ...

def running_trinket(): # -> bool:
    """
    A special case for Trinket"""
    ...

def running_replit(): # -> bool:
    """
    A special case for REPLIT."""
    ...

DEFAULT_BASE64_ICON = ...
DEFAULT_BASE64_ICON_16_BY_16 = ...
DEFAULT_BASE64_LOADING_GIF = ...
PSG_DEBUGGER_LOGO = ...
UDEMY_ICON = ...
BLANK_BASE64 = ...
BLANK_BASE64 = ...
DEFAULT_WINDOW_ICON = ...
DEFAULT_ELEMENT_SIZE = ...
DEFAULT_BUTTON_ELEMENT_SIZE = ...
DEFAULT_MARGINS = ...
DEFAULT_ELEMENT_PADDING = ...
DEFAULT_AUTOSIZE_TEXT = ...
DEFAULT_AUTOSIZE_BUTTONS = ...
DEFAULT_FONT = ...
DEFAULT_TEXT_JUSTIFICATION = ...
DEFAULT_BORDER_WIDTH = ...
DEFAULT_AUTOCLOSE_TIME = ...
DEFAULT_DEBUG_WINDOW_SIZE = ...
DEFAULT_WINDOW_LOCATION = ...
MAX_SCROLLED_TEXT_BOX_HEIGHT = ...
DEFAULT_TOOLTIP_TIME = ...
DEFAULT_TOOLTIP_OFFSET = ...
DEFAULT_KEEP_ON_TOP = ...
DEFAULT_SCALING = ...
TOOLTIP_BACKGROUND_COLOR = ...
TOOLTIP_FONT = ...
BLUES = ...
PURPLES = ...
GREENS = ...
YELLOWS = ...
TANS = ...
NICE_BUTTON_COLORS = ...
COLOR_SYSTEM_DEFAULT = ...
DEFAULT_BUTTON_COLOR = ...
OFFICIAL_PYSIMPLEGUI_BUTTON_COLOR = ...
OFFICIAL_PYSIMPLEGUI_THEME = ...
DEFAULT_ERROR_BUTTON_COLOR = ...
DEFAULT_BACKGROUND_COLOR = ...
DEFAULT_ELEMENT_BACKGROUND_COLOR = ...
DEFAULT_ELEMENT_TEXT_COLOR = ...
DEFAULT_TEXT_ELEMENT_BACKGROUND_COLOR = ...
DEFAULT_TEXT_COLOR = ...
DEFAULT_INPUT_ELEMENTS_COLOR = ...
DEFAULT_INPUT_TEXT_COLOR = ...
DEFAULT_SCROLLBAR_COLOR = ...
RELIEF_RAISED = ...
RELIEF_SUNKEN = ...
RELIEF_FLAT = ...
RELIEF_RIDGE = ...
RELIEF_GROOVE = ...
RELIEF_SOLID = ...
THEME_DEFAULT = ...
THEME_WINNATIVE = ...
THEME_CLAM = ...
THEME_ALT = ...
THEME_CLASSIC = ...
THEME_VISTA = ...
THEME_XPNATIVE = ...
THEME_LIST = ...
DEFAULT_TTK_THEME = ...
TTK_THEME_LIST = ...
USE_TTK_BUTTONS = ...
DEFAULT_PROGRESS_BAR_COLOR = ...
DEFAULT_PROGRESS_BAR_COMPUTE = ...
DEFAULT_PROGRESS_BAR_COLOR_OFFICIAL = ...
DEFAULT_PROGRESS_BAR_SIZE = ...
DEFAULT_PROGRESS_BAR_BORDER_WIDTH = ...
DEFAULT_PROGRESS_BAR_RELIEF = ...
PROGRESS_BAR_STYLES = ...
DEFAULT_PROGRESS_BAR_STYLE = ...
DEFAULT_METER_ORIENTATION = ...
DEFAULT_SLIDER_ORIENTATION = ...
DEFAULT_SLIDER_BORDER_WIDTH = ...
DEFAULT_SLIDER_RELIEF = ...
DEFAULT_FRAME_RELIEF = ...
DEFAULT_LISTBOX_SELECT_MODE = ...
SELECT_MODE_MULTIPLE = ...
LISTBOX_SELECT_MODE_MULTIPLE = ...
SELECT_MODE_BROWSE = ...
LISTBOX_SELECT_MODE_BROWSE = ...
SELECT_MODE_EXTENDED = ...
LISTBOX_SELECT_MODE_EXTENDED = ...
SELECT_MODE_SINGLE = ...
LISTBOX_SELECT_MODE_SINGLE = ...
TABLE_SELECT_MODE_NONE = ...
TABLE_SELECT_MODE_BROWSE = ...
TABLE_SELECT_MODE_EXTENDED = ...
DEFAULT_TABLE_SELECT_MODE = ...
TABLE_CLICKED_INDICATOR = ...
DEFAULT_MODAL_WINDOWS_ENABLED = ...
DEFAULT_MODAL_WINDOWS_FORCED = ...
TAB_LOCATION_TOP = ...
TAB_LOCATION_TOP_LEFT = ...
TAB_LOCATION_TOP_RIGHT = ...
TAB_LOCATION_LEFT = ...
TAB_LOCATION_LEFT_TOP = ...
TAB_LOCATION_LEFT_BOTTOM = ...
TAB_LOCATION_RIGHT = ...
TAB_LOCATION_RIGHT_TOP = ...
TAB_LOCATION_RIGHT_BOTTOM = ...
TAB_LOCATION_BOTTOM = ...
TAB_LOCATION_BOTTOM_LEFT = ...
TAB_LOCATION_BOTTOM_RIGHT = ...
TITLE_LOCATION_TOP = ...
TITLE_LOCATION_BOTTOM = ...
TITLE_LOCATION_LEFT = ...
TITLE_LOCATION_RIGHT = ...
TITLE_LOCATION_TOP_LEFT = ...
TITLE_LOCATION_TOP_RIGHT = ...
TITLE_LOCATION_BOTTOM_LEFT = ...
TITLE_LOCATION_BOTTOM_RIGHT = ...
TEXT_LOCATION_TOP = ...
TEXT_LOCATION_BOTTOM = ...
TEXT_LOCATION_LEFT = ...
TEXT_LOCATION_RIGHT = ...
TEXT_LOCATION_TOP_LEFT = ...
TEXT_LOCATION_TOP_RIGHT = ...
TEXT_LOCATION_BOTTOM_LEFT = ...
TEXT_LOCATION_BOTTOM_RIGHT = ...
TEXT_LOCATION_CENTER = ...
GRAB_ANYWHERE_IGNORE_THESE_WIDGETS = ...
ThisRow = ...
MESSAGE_BOX_LINE_WIDTH = ...
EVENT_TIMEOUT :str = ...
WIN_CLOSED :None = None
WINDOW_CLOSE_ATTEMPTED_EVENT = ...
TITLEBAR_MINIMIZE_KEY = ...
TITLEBAR_MAXIMIZE_KEY = ...
TITLEBAR_CLOSE_KEY = ...
TITLEBAR_IMAGE_KEY = ...
TITLEBAR_DO_NOT_USE_AN_ICON = ...
WRITE_ONLY_KEY = ...
MENU_DISABLED_CHARACTER = ...
MENU_SHORTCUT_CHARACTER = ...
MENU_KEY_SEPARATOR = ...
MENU_SEPARATOR_LINE = ...
MENU_RIGHT_CLICK_EDITME_EXIT = ...
MENU_RIGHT_CLICK_EDITME_VER_EXIT = ...
MENU_RIGHT_CLICK_EDITME_VER_LOC_EXIT = ...
MENU_RIGHT_CLICK_EDITME_VER_SETTINGS_EXIT = ...
MENU_RIGHT_CLICK_EXIT = ...
MENU_RIGHT_CLICK_DISABLED = ...
_MENU_RIGHT_CLICK_TABGROUP_DEFAULT = ...
ENABLE_TK_WINDOWS = ...
USE_CUSTOM_TITLEBAR = ...
CUSTOM_TITLEBAR_BACKGROUND_COLOR = ...
CUSTOM_TITLEBAR_TEXT_COLOR = ...
CUSTOM_TITLEBAR_ICON = ...
CUSTOM_TITLEBAR_FONT = ...
TITLEBAR_METADATA_MARKER = ...
CUSTOM_MENUBAR_METADATA_MARKER = ...
SUPPRESS_ERROR_POPUPS = ...
SUPPRESS_RAISE_KEY_ERRORS = ...
SUPPRESS_KEY_GUESSING = ...
ENABLE_TREEVIEW_869_PATCH = ...
ENABLE_MAC_NOTITLEBAR_PATCH = ...
ENABLE_MAC_MODAL_DISABLE_PATCH = ...
ENABLE_MAC_DISABLE_GRAB_ANYWHERE_WITH_TITLEBAR = ...
OLD_TABLE_TREE_SELECTED_ROW_COLORS = ...
ALTERNATE_TABLE_AND_TREE_SELECTED_ROW_COLORS = ...
SYMBOL_SQUARE = ...
SYMBOL_CIRCLE = ...
SYMBOL_CIRCLE_OUTLINE = ...
SYMBOL_UP = ...
SYMBOL_RIGHT = ...
SYMBOL_LEFT = ...
SYMBOL_DOWN = ...
SYMBOL_X = ...
SYMBOL_CHECK = ...
SYMBOL_CHECK_SMALL = ...
SYMBOL_X_SMALL = ...
SYMBOL_BALLOT_X = ...
SYMBOL_BALLOT_CHECK = ...
SYMBOL_LEFT_DOUBLE = ...
SYMBOL_RIGHT_DOUBLE = ...
SYMBOL_LEFT_ARROWHEAD = ...
SYMBOL_RIGHT_ARROWHEAD = ...
SYMBOL_UP_ARROWHEAD = ...
SYMBOL_DOWN_ARROWHEAD = ...
if sum([int(i) for i in tclversion_detailed.split('.')]) > 19:
    SYMBOL_TITLEBAR_MINIMIZE = ...
    SYMBOL_TITLEBAR_MAXIMIZE = ...
    SYMBOL_TITLEBAR_CLOSE = ...
else:
    SYMBOL_TITLEBAR_MINIMIZE = ...
    SYMBOL_TITLEBAR_MAXIMIZE = ...
    SYMBOL_TITLEBAR_CLOSE = ...
DEFAULT_USER_SETTINGS_WIN_PATH = ...
DEFAULT_USER_SETTINGS_LINUX_PATH = ...
DEFAULT_USER_SETTINGS_MAC_PATH = ...
DEFAULT_USER_SETTINGS_TRINKET_PATH = ...
DEFAULT_USER_SETTINGS_REPLIT_PATH = ...
DEFAULT_USER_SETTINGS_UNKNOWN_OS_PATH = ...
DEFAULT_USER_SETTINGS_PATH = ...
DEFAULT_USER_SETTINGS_PYSIMPLEGUI_PATH = ...
DEFAULT_USER_SETTINGS_PYSIMPLEGUI_FILENAME = ...
def rgb(red, green, blue): # -> str:
    """
    Given integer values of Re"""
    ...

BUTTON_TYPE_BROWSE_FOLDER = ...
BUTTON_TYPE_BROWSE_FILE = ...
BUTTON_TYPE_BROWSE_FILES = ...
BUTTON_TYPE_SAVEAS_FILE = ...
BUTTON_TYPE_CLOSES_WIN = ...
BUTTON_TYPE_CLOSES_WIN_ONLY = ...
BUTTON_TYPE_READ_FORM = ...
BUTTON_TYPE_REALTIME = ...
BUTTON_TYPE_CALENDAR_CHOOSER = ...
BUTTON_TYPE_COLOR_CHOOSER = ...
BUTTON_TYPE_SHOW_DEBUGGER = ...
BROWSE_FILES_DELIMITER = ...
FILE_TYPES_ALL_FILES = ...
BUTTON_DISABLED_MEANS_IGNORE = ...
ELEM_TYPE_TEXT = ...
ELEM_TYPE_INPUT_TEXT = ...
ELEM_TYPE_INPUT_COMBO = ...
ELEM_TYPE_INPUT_OPTION_MENU = ...
ELEM_TYPE_INPUT_RADIO = ...
ELEM_TYPE_INPUT_MULTILINE = ...
ELEM_TYPE_INPUT_CHECKBOX = ...
ELEM_TYPE_INPUT_SPIN = ...
ELEM_TYPE_BUTTON = ...
ELEM_TYPE_IMAGE = ...
ELEM_TYPE_CANVAS = ...
ELEM_TYPE_FRAME = ...
ELEM_TYPE_GRAPH = ...
ELEM_TYPE_TAB = ...
ELEM_TYPE_TAB_GROUP = ...
ELEM_TYPE_INPUT_SLIDER = ...
ELEM_TYPE_INPUT_LISTBOX = ...
ELEM_TYPE_OUTPUT = ...
ELEM_TYPE_COLUMN = ...
ELEM_TYPE_MENUBAR = ...
ELEM_TYPE_PROGRESS_BAR = ...
ELEM_TYPE_BLANK = ...
ELEM_TYPE_TABLE = ...
ELEM_TYPE_TREE = ...
ELEM_TYPE_ERROR = ...
ELEM_TYPE_SEPARATOR = ...
ELEM_TYPE_STATUSBAR = ...
ELEM_TYPE_PANE = ...
ELEM_TYPE_BUTTONMENU = ...
ELEM_TYPE_TITLEBAR = ...
ELEM_TYPE_SIZEGRIP = ...
POPUP_BUTTONS_YES_NO = ...
POPUP_BUTTONS_CANCELLED = ...
POPUP_BUTTONS_ERROR = ...
POPUP_BUTTONS_OK_CANCEL = ...
POPUP_BUTTONS_OK = ...
POPUP_BUTTONS_NO_BUTTONS = ...
class ToolTip:
    """
    Create a tooltip for a giv"""
    def __init__(self, widget, text, timeout=...) -> None:
        """
        :param widget:  The tk"""
        ...
    
    def enter(self, event=...): # -> None:
        """
        Called by tkinter when"""
        ...
    
    def leave(self, event=...): # -> None:
        """
        Called by tktiner when"""
        ...
    
    def schedule(self): # -> None:
        """
        Schedule a timer to ti"""
        ...
    
    def unschedule(self): # -> None:
        """
        Cancel timer used to t"""
        ...
    
    def showtip(self): # -> None:
        """
        Creates a topoltip win"""
        ...
    
    def hidetip(self): # -> None:
        """
        Destroy the tooltip wi"""
        ...
    


class Element:
    """ The base class for all Elements"""
    def __init__(self, type, size=..., auto_size_text=..., font=..., background_color=..., text_color=..., key=..., pad=..., tooltip=..., visible=..., metadata=...) -> None:
        """
        Element base class. On"""
        ...
    
    @property
    def visible(self): # -> bool:
        """
        Returns visibility sta"""
        ...
    
    @property
    def metadata(self): # -> Any:
        """
        Metadata is an Element"""
        ...
    
    @metadata.setter
    def metadata(self, value): # -> None:
        """
         Metadata is an Elemen"""
        ...
    
    @property
    def key(self): # -> None:
        """
        Returns key for the el"""
        ...
    
    @property
    def widget(self): # -> None:
        """
        Returns tkinter widget"""
        ...
    
    def bind(self, bind_string, key_modifier, propagate=...): # -> None:
        """
        Used to add tkinter ev"""
        ...
    
    def unbind(self, bind_string): # -> None:
        """
        Removes a previously b"""
        ...
    
    def set_tooltip(self, tooltip_text): # -> None:
        """
        Called by application """
        ...
    
    def set_focus(self, force=...): # -> None:
        """
        Sets the current focus"""
        ...
    
    def block_focus(self, block=...):
        """
        Enable or disable the """
        ...
    
    def get_next_focus(self): # -> None:
        """
        Gets the next element """
        ...
    
    def get_previous_focus(self): # -> None:
        """
        Gets the element that """
        ...
    
    def set_size(self, size=...):
        """
        Changes the size of an"""
        ...
    
    def get_size(self): # -> tuple[Unknown | None, Unknown | None]:
        """
        Return the size of an """
        ...
    
    def hide_row(self): # -> None:
        """
        Hide the entire row an"""
        ...
    
    def unhide_row(self): # -> None:
        """
        Unhides (makes visible"""
        ...
    
    def expand(self, expand_x=..., expand_y=..., expand_row=...): # -> None:
        """
        Causes the Element to """
        ...
    
    def set_cursor(self, cursor=..., cursor_color=...): # -> None:
        """
        Sets the cursor for th"""
        ...
    
    def set_vscroll_position(self, percent_from_top): # -> None:
        """
        Attempts to set the ve"""
        ...
    
    def grab_anywhere_exclude(self): # -> None:
        """
        Excludes this element """
        ...
    
    def grab_anywhere_include(self): # -> None:
        """
        Includes this element """
        ...
    
    def set_right_click_menu(self, menu=...):
        ...
    
    def update(self, *args :Any, **kwargs:Any) -> None:
        """
        A dummy update call.  """
        ...
    
    def __call__(self, *args, **kwargs): # -> None:
        """
        Makes it possible to """"
        ...
    
    SetTooltip = ...
    SetFocus = ...

ElementLayout = list[list[Element]]

class Input(Element):
    """
    Display a single text inpu"""
    def __init__(self, default_text=..., size=..., s=..., disabled=..., password_char=..., justification=..., background_color=..., text_color=..., font=..., tooltip=..., border_width=..., change_submits=..., enable_events=..., do_not_clear=..., key=..., k=..., focus=..., pad=..., p=..., use_readonly_for_disable=..., readonly=..., disabled_readonly_background_color=..., disabled_readonly_text_color=..., expand_x=..., expand_y=..., right_click_menu=..., visible=..., metadata=...) -> None:
        """
        :param default_text:  """
        ...
    
    def update(self, value:str|None = ..., disabled:bool|None = ..., select:bool|None = ..., visible:bool|None = ..., text_color:str|None = ..., background_color:str|None = ..., move_cursor_to:int|str|None = ..., password_char:str|None = ..., paste:bool|None = ...) -> None:
        """
        Changes some of the se"""
        ...
    
    def get(self) -> str:
        """
        Read and return the cu"""
        ...
    
    Get = ...
    Update = ...


In = Input
InputText = Input
I = Input
class Combo(Element):
    """
    ComboBox Element - A combi"""
    def __init__(self, values, default_value=..., size=..., s=..., auto_size_text=..., background_color=..., text_color=..., button_background_color=..., button_arrow_color=..., bind_return_key=..., change_submits=..., enable_events=..., disabled=..., key=..., k=..., pad=..., p=..., expand_x=..., expand_y=..., tooltip=..., readonly=..., font=..., visible=..., metadata=...) -> None:
        """
        :param values:        """
        ...
    
    def update(self, value=..., values=..., set_to_index=..., disabled=..., readonly=..., font=..., visible=..., size=...) -> None:
        """
        Changes some of the se"""
        ...
    
    def get(self) -> str:
        """
        Returns the current (r"""
        ...
    
    Get = ...
    Update = ...


InputCombo = Combo
DropDown = InputCombo
Drop = InputCombo
DD = Combo
class OptionMenu(Element):
    """
    Option Menu is an Element """
    def __init__(self, values, default_value=..., size=..., s=..., disabled=..., auto_size_text=..., expand_x=..., expand_y=..., background_color=..., text_color=..., key=..., k=..., pad=..., p=..., tooltip=..., visible=..., metadata=...) -> None:
        """
        :param values:        """
        ...
    
    def update(self, value=..., values=..., disabled=..., visible=..., size=...):
        """
        Changes some of the se"""
        ...
    
    Update = ...


InputOptionMenu = OptionMenu
class Listbox(Element):
    """
    A List Box.  Provide a lis"""
    def __init__(self, values=..., default_values=..., select_mode:str|None=..., change_submits=..., enable_events:bool=..., bind_return_key=..., size=..., s=..., disabled=..., auto_size_text=..., font=..., no_scrollbar=..., horizontal_scroll=..., background_color=..., text_color=..., highlight_background_color=..., highlight_text_color=..., key=..., k=..., pad=..., p=..., tooltip=..., expand_x=..., expand_y=..., right_click_menu=..., visible=..., metadata=...) -> None:
        """
        :param values:        """
        ...
    
    def update(self, values:list[Any]|None=..., disabled:bool|None=..., set_to_index:int|Sequence[Any]|None=..., scroll_to_index:int|None=..., select_mode:str|None=..., visible:bool|None=...) -> None:
        """
        Changes some of the se"""
        ...
    
    def set_value(self, values:Sequence[Any]) -> None:
        """
        Set listbox highlighte"""
        ...
    
    def get_list_values(self: Listbox) -> list[Any]:
        """
        Returns list of Values"""
        ...
    
    def get_indexes(self):
        """
        Returns the items curr"""
        ...
    
    def get(self) -> list[Any]:
        """
        Returns the list of it"""
        ...
    
    GetIndexes = ...
    GetListValues = ...
    SetValue = ...
    Update = ...


LBox = Listbox
LB = Listbox
class Radio(Element):
    """
    Radio Button Element - Use"""
    def __init__(self, text, group_id, default=..., disabled=..., size=..., s=..., auto_size_text=..., background_color=..., text_color=..., circle_color=..., font=..., key=..., k=..., pad=..., p=..., tooltip=..., change_submits=..., enable_events=..., right_click_menu=..., expand_x=..., expand_y=..., visible=..., metadata=...) -> None:
        """
        :param text:          """
        ...
    
    def update(self, value=..., text=..., background_color=..., text_color=..., circle_color=..., disabled=..., visible=...):
        """
        Changes some of the se"""
        ...
    
    def reset_group(self): # -> None:
        """
        Sets all Radio Buttons"""
        ...
    
    def get(self: Radio) -> bool:
        """
        A snapshot of the valu"""
        ...
    
    Get = ...
    ResetGroup = ...
    Update = ...


R = Radio
Rad = Radio
class Checkbox(Element):
    """
    Checkbox Element - Display"""
    def __init__(self, text, default=..., size=..., s=..., auto_size_text=..., font=..., background_color=..., text_color=..., checkbox_color=..., change_submits=..., enable_events=..., disabled=..., key=..., k=..., pad=..., p=..., tooltip=..., right_click_menu=..., expand_x=..., expand_y=..., visible=..., metadata=...) -> None:
        """
        :param text:          """
        ...
    
    def get(self: Checkbox) -> bool:
        """
        Return the current sta"""
        ...
    
    def update(self, value=..., text=..., background_color=..., text_color=..., checkbox_color=..., disabled=..., visible=...):
        """
        Changes some of the se"""
        ...
    
    Get = ...
    Update = ...


CB = Checkbox
CBox = Checkbox
Check = Checkbox
class Spin(Element):
    """
    A spinner with up/down but"""
    def __init__(self, values, initial_value=..., disabled=..., change_submits=..., enable_events=..., readonly=..., size=..., s=..., auto_size_text=..., bind_return_key=..., font=..., background_color=..., text_color=..., key=..., k=..., pad=..., p=..., tooltip=..., right_click_menu=..., expand_x=..., expand_y=..., visible=..., metadata=...) -> None:
        """
        :param values:        """
        ...
    
    def update(self, value=..., values=..., disabled=..., readonly=..., visible=...):
        """
        Changes some of the se"""
        ...
    
    def get(self):
        """
        Return the current cho"""
        ...
    
    Get = ...
    Update = ...


Sp: Spin = ...
class Multiline(Element):
    """
    Multiline Element - Displa"""
    def __init__(self, default_text=..., enter_submits=..., disabled=..., autoscroll=..., border_width=..., size=..., s=..., auto_size_text=..., background_color=..., text_color=..., horizontal_scroll=..., change_submits=..., enable_events=..., do_not_clear=..., key=..., k=..., write_only=..., auto_refresh=..., reroute_stdout=..., reroute_stderr=..., reroute_cprint=..., echo_stdout_stderr=..., focus=..., font=..., pad=..., p=..., tooltip=..., justification=..., no_scrollbar=..., expand_x=..., expand_y=..., rstrip=..., right_click_menu=..., visible=..., metadata=...) -> None:
        """
        :param default_text:  """
        ...
    
    def update(self, value:Any|None=..., disabled:bool|None=..., append=..., font=..., text_color=..., background_color=..., text_color_for_value=..., background_color_for_value=..., visible=..., autoscroll=..., justification=..., font_for_value=...) -> None:
        """
        Changes some of the se"""
        ...
    
    def get(self) -> str:
        """
        Return current content"""
        ...
    
    def print(self, *args, end=..., sep=..., text_color=..., background_color=..., justification=..., font=..., colors=..., t=..., b=..., c=..., autoscroll=...):
        """
        Print like Python norm"""
        ...
    
    def reroute_stdout_to_here(self): # -> None:
        """
        Sends stdout (prints) """
        ...
    
    def reroute_stderr_to_here(self): # -> None:
        """
        Sends stderr to this e"""
        ...
    
    def restore_stdout(self): # -> None:
        """
        Restore a previously r"""
        ...
    
    def restore_stderr(self): # -> None:
        """
        Restore a previously r"""
        ...
    
    def write(self, txt): # -> None:
        """
        Called by Python (not """
        ...
    
    def flush(self): # -> None:
        """
        Flush parameter was pa"""
        ...
    
    def __del__(self): # -> None:
        """
        If this Widget is dele"""
        ...
    
    Get = ...
    Update = ...


ML = Multiline
MLine = Multiline
class Text(Element):
    """
    Text - Display some text i"""
    def __init__(self, text=..., size=..., s=..., auto_size_text=..., click_submits=..., enable_events=..., relief=..., font=..., text_color=..., background_color=..., border_width=..., justification=..., pad=..., p=..., key=..., k=..., right_click_menu=..., expand_x=..., expand_y=..., grab=..., tooltip=..., visible=..., metadata=...) -> None:
        """
        :param text:          """
        ...
    
    def update(self, value:str|None=..., background_color:str|None=..., text_color:str|None=..., font:tuple[str,str|int]|None=..., visible:bool|None=...) -> None:
        """
        Changes some of the se"""
        ...
    
    def get(self): # -> Literal['']:
        """
        Gets the current value"""
        ...
    
    @classmethod
    def fonts_installed_list(cls): # -> list[str]:
        """
        Returns a list of stri"""
        ...
    
    @classmethod
    def char_width_in_pixels(cls, font, character=...): # -> int:
        """
        Get the with of the ch"""
        ...
    
    @classmethod
    def char_height_in_pixels(cls, font): # -> int:
        """
        Get the height of a st"""
        ...
    
    @classmethod
    def string_width_in_pixels(cls, font, string): # -> int:
        """
        Get the with of the su"""
        ...
    
    def print(self, *args, end=..., sep=..., text_color=..., background_color=..., justification=..., font=..., colors=..., t=..., b=..., c=..., autoscroll=..., append=...):
        """
        Print like Python norm"""
        ...
    
    Get = ...
    Update = ...


Txt: Text = ...
T: Text = ...
class StatusBar(Element):
    """
    A StatusBar Element create"""
    def __init__(self, text, size=..., s=..., auto_size_text=..., click_submits=..., enable_events=..., relief=..., font=..., text_color=..., background_color=..., justification=..., pad=..., p=..., key=..., k=..., right_click_menu=..., expand_x=..., expand_y=..., tooltip=..., visible=..., metadata=...) -> None:
        """
        :param text:          """
        ...
    
    def update(self, value=..., background_color=..., text_color=..., font=..., visible=...):
        """
        Changes some of the se"""
        ...
    
    Update = ...


SBar = StatusBar
class TKProgressBar:
    uniqueness_counter = ...
    def __init__(self, root, max, length=..., width=..., ttk_theme=..., style_name=..., relief=..., border_width=..., orientation=..., BarColor=..., key=...) -> None:
        """
        :param root:         T"""
        ...
    
    def Update(self, count=..., max=...): # -> bool:
        """
        Update the current val"""
        ...
    


class TKOutput(tk.Frame):
    """
    tkinter style class. Inher"""
    def __init__(self, parent, width, height, bd, background_color=..., text_color=..., echo_stdout_stderr=..., font=..., pad=...) -> None:
        """
        :param parent:        """
        ...
    
    def write(self, txt):
        """
        Called by Python (not """
        ...
    
    def Close(self): # -> None:
        """
        Called when wanting to"""
        ...
    
    def flush(self): # -> None:
        """
        Flush parameter was pa"""
        ...
    
    def __del__(self): # -> None:
        """
        If this Widget is dele"""
        ...
    


class Output(Element):
    """
    Output Element - a multi-l"""
    def __init__(self, size=..., s=..., background_color=..., text_color=..., pad=..., p=..., echo_stdout_stderr=..., font=..., tooltip=..., key=..., k=..., right_click_menu=..., expand_x=..., expand_y=..., visible=..., metadata=...) -> None:
        """
        :param size:          """
        ...
    
    @property
    def tk_out(self): # -> TKOutput:
        """
        Returns the TKOutput o"""
        ...
    
    def update(self, value=..., visible=...): # -> None:
        """
        Changes some of the se"""
        ...
    
    def get(self): # -> str:
        """
        Returns the current co"""
        ...
    
    def expand(self, expand_x=..., expand_y=..., expand_row=...): # -> None:
        """
        Causes the Element to """
        ...
    
    def __del__(self): # -> None:
        """
        Delete this element. N"""
        ...
    
    TKOut = ...
    Update = ...
    Get = ...


class Button(Element):
    """
    Button Element - Defines a"""
    def __init__(self, button_text=..., button_type=..., target=..., tooltip=..., file_types=..., initial_folder=..., default_extension=..., disabled=..., change_submits=..., enable_events=..., image_filename=..., image_data=..., image_size=..., image_subsample=..., image_source=..., border_width=..., size=..., s=..., auto_size_button=..., button_color=..., disabled_button_color=..., highlight_colors=..., mouseover_colors=..., use_ttk_buttons=..., font=..., bind_return_key=..., focus=..., pad=..., p=..., key=..., k=..., right_click_menu=..., expand_x=..., expand_y=..., visible=..., metadata=...) -> None:
        """
        :param button_text:   """
        ...
    
    def ButtonReleaseCallBack(self, parm): # -> None:
        """
        Not a user callable fu"""
        ...
    
    def ButtonPressCallBack(self, parm): # -> None:
        """
        Not a user callable me"""
        ...
    
    def ButtonCallBack(self): # -> None:
        """
        Not user callable! Cal"""
        ...
    
    def update(self, text:str|None=..., button_color:tuple[str,str]|None=..., disabled:bool|None=..., image_data:str|None=..., image_filename:str|None=..., visible:bool|None=..., image_subsample:int|None=..., disabled_button_color:tuple[str, str]|None=..., image_size:tuple[int,int]|None=...) -> None:
        """
        Changes some of the se"""
        ...
    
    def get_text(self): # -> str:
        """
        Returns the current te"""
        ...
    
    def click(self): # -> None:
        """
        Generates a click of t"""
        ...
    
    Click = ...
    GetText = ...
    Update = ...


B = Button
Btn = Button
class ButtonMenu(Element):
    """
    The Button Menu Element.  """
    def __init__(self, button_text, menu_def, tooltip=..., disabled=..., image_source=..., image_filename=..., image_data=..., image_size=..., image_subsample=..., border_width=..., size=..., s=..., auto_size_button=..., button_color=..., text_color=..., background_color=..., disabled_text_color=..., font=..., item_font=..., pad=..., p=..., expand_x=..., expand_y=..., key=..., k=..., tearoff=..., visible=..., metadata=...) -> None:
        """
        :param button_text:   """
        ...
    
    def update(self, menu_definition=..., visible=..., image_source=..., image_size=..., image_subsample=..., button_text=...):
        """
        Changes some of the se"""
        ...
    
    def click(self): # -> None:
        """
        Generates a click of t"""
        ...
    
    Update = ...
    Click = ...


BMenu = ButtonMenu
BM = ButtonMenu
class ProgressBar(Element):
    """
    Progress Bar Element - Dis"""
    def __init__(self, max_value, orientation=..., size=..., s=..., size_px=..., auto_size_text=..., bar_color=..., style=..., border_width=..., relief=..., key=..., k=..., pad=..., p=..., right_click_menu=..., expand_x=..., expand_y=..., visible=..., metadata=...) -> None:
        """
        :param max_value:     """
        ...
    
    def update_bar(self, current_count, max=...): # -> bool:
        """
        DEPRECATED BUT STILL U"""
        ...
    
    def update(self, current_count=..., max=..., bar_color=..., visible=...):
        """
        Changes some of the se"""
        ...
    
    Update = ...
    UpdateBar = ...


PBar = ProgressBar
Prog = ProgressBar
Progress = ProgressBar
class Image(Element):
    """
    Image Element - show an im"""
    def __init__(self, source=..., filename=..., data=..., background_color=..., size=..., s=..., pad=..., p=..., key=..., k=..., tooltip=..., subsample=..., right_click_menu=..., expand_x=..., expand_y=..., visible=..., enable_events=..., metadata=...) -> None:
        """
        :param source:        """
        ...
    
    def update(self, source=..., filename=..., data=..., size=..., subsample=..., visible=...):
        """
        Changes some of the se"""
        ...
    
    def update_animation(self, source:str|bytes, time_between_frames:int=...) -> None:
        """
        Show an Animated GIF. """
        ...
    
    def update_animation_no_buffering(self, source, time_between_frames=...):
        """
        Show an Animated GIF. """
        ...
    
    Update = ...
    UpdateAnimation = ...


Im = Image
class Canvas(Element):
    def __init__(self, canvas=..., background_color=..., size=..., s=..., pad=..., p=..., key=..., k=..., tooltip=..., right_click_menu=..., expand_x=..., expand_y=..., visible=..., border_width=..., metadata=...) -> None:
        """
        :param canvas:        """
        ...
    
    def update(self, background_color=..., visible=...): # -> None:
        """

        :param background_co"""
        ...
    
    @property
    def tk_canvas(self): # -> None:
        """
        Returns the underlying"""
        ...
    
    TKCanvas = ...


class Graph(Element):
    """
    Creates an area for you to"""
    def __init__(self, canvas_size, graph_bottom_left, graph_top_right, background_color=..., pad=..., p=..., change_submits=..., drag_submits=..., enable_events=..., motion_events=..., key=..., k=..., tooltip=..., right_click_menu=..., expand_x=..., expand_y=..., visible=..., float_values=..., border_width=..., metadata=...) -> None:
        """
        :param canvas_size:   """
        ...
    
    def draw_line(self, point_from, point_to, color=..., width=...): # -> None:
        """
        Draws a line from one """
        ...
    
    def draw_lines(self, points, color=..., width=...): # -> _CanvasItemId | None:
        """
        Draw a series of lines"""
        ...
    
    def draw_point(self, point, size=..., color=...): # -> _CanvasItemId | None:
        """
        Draws a "dot" at the p"""
        ...
    
    def draw_circle(self, center_location, radius, fill_color=..., line_color=..., line_width=...):
        """
        Draws a circle, cenete"""
        ...
    
    def draw_oval(self, top_left, bottom_right, fill_color=..., line_color=..., line_width=...): # -> _CanvasItemId | None:
        """
        Draws an oval based on"""
        ...
    
    def draw_arc(self, top_left, bottom_right, extent, start_angle, style=..., arc_color=..., line_width=..., fill_color=...): # -> _CanvasItemId | None:
        """
        Draws different types """
        ...
    
    def draw_rectangle(self, top_left, bottom_right, fill_color=..., line_color=..., line_width=...): # -> _CanvasItemId | None:
        """
        Draw a rectangle given"""
        ...
    
    def draw_polygon(self, points, fill_color=..., line_color=..., line_width=...): # -> _CanvasItemId | None:
        """
        Draw a polygon given l"""
        ...
    
    def draw_text(self, text, location, color=..., font=..., angle=..., text_location=...): # -> None:
        """
        Draw some text on your"""
        ...
    
    def draw_image(self, filename=..., data=..., location=...):
        """
        Places an image onto y"""
        ...
    
    def erase(self): # -> None:
        """
        Erase the Graph - Remo"""
        ...
    
    def delete_figure(self, id): # -> None:
        """
        Remove from the Graph """
        ...
    
    def update(self, background_color=..., visible=...): # -> None:
        """
        Changes some of the se"""
        ...
    
    def move(self, x_direction, y_direction): # -> None:
        """
        Moves the entire drawi"""
        ...
    
    def move_figure(self, figure, x_direction, y_direction): # -> None:
        """
        Moves a previously dra"""
        ...
    
    def relocate_figure(self, figure, x, y): # -> None:
        """
        Move a previously made"""
        ...
    
    def send_figure_to_back(self, figure): # -> None:
        """
        Changes Z-order of fig"""
        ...
    
    def bring_figure_to_front(self, figure): # -> None:
        """
        Changes Z-order of fig"""
        ...
    
    def get_figures_at_location(self, location): # -> tuple[_CanvasItemId, ...]:
        """
        Returns a list of figu"""
        ...
    
    def get_bounding_box(self, figure): # -> tuple[tuple[None, None] | tuple[Unknown, Unknown] | tuple[int, int], tuple[None, None] | tuple[Unknown, Unknown] | tuple[int, int]]:
        """
        Given a figure, return"""
        ...
    
    def change_coordinates(self, graph_bottom_left, graph_top_right): # -> None:
        """
        Changes the corrdinate"""
        ...
    
    @property
    def tk_canvas(self): # -> Canvas:
        """
        Returns the underlying"""
        ...
    
    def button_release_call_back(self, event): # -> None:
        """
        Not a user callable me"""
        ...
    
    def button_press_call_back(self, event): # -> None:
        """
        Not a user callable me"""
        ...
    
    def motion_call_back(self, event): # -> None:
        """
        Not a user callable me"""
        ...
    
    BringFigureToFront = ...
    ButtonPressCallBack = ...
    ButtonReleaseCallBack = ...
    DeleteFigure = ...
    DrawArc = ...
    DrawCircle = ...
    DrawImage = ...
    DrawLine = ...
    DrawOval = ...
    DrawPoint = ...
    DrawPolygon = ...
    DrawLines = ...
    DrawRectangle = ...
    DrawText = ...
    GetFiguresAtLocation = ...
    GetBoundingBox = ...
    Erase = ...
    MotionCallBack = ...
    Move = ...
    MoveFigure = ...
    RelocateFigure = ...
    SendFigureToBack = ...
    TKCanvas = ...
    Update = ...


G = Graph
class Frame(Element):
    """
    A Frame Element that conta"""
    def __init__(self, title, layout, title_color=..., background_color=..., title_location=..., relief=..., size=..., s=..., font=..., pad=..., p=..., border_width=..., key=..., k=..., tooltip=..., right_click_menu=..., expand_x=..., expand_y=..., grab=..., visible=..., element_justification=..., vertical_alignment=..., metadata=...) -> None:
        """
        :param title:         """
        ...
    
    def add_row(self, *args): # -> None:
        """
        Not recommended user c"""
        ...
    
    def layout(self, rows): # -> Self@Frame:
        """
        Can use like the Windo"""
        ...
    
    def update(self, value=..., visible=...): # -> None:
        """
        Changes some of the se"""
        ...
    
    AddRow = ...
    Layout = ...
    Update = ...


Fr = Frame
class VerticalSeparator(Element):
    """
    Vertical Separator Element"""
    def __init__(self, color=..., pad=..., p=..., key=..., k=...) -> None:
        """
        :param color: Color of"""
        ...
    


VSeperator = VerticalSeparator
VSeparator = VerticalSeparator
VSep = VerticalSeparator
class HorizontalSeparator(Element):
    """
    Horizontal Separator Eleme"""
    def __init__(self, color=..., pad=..., p=..., key=..., k=...) -> None:
        """
        :param color: Color of"""
        ...
    


HSeparator = HorizontalSeparator
HSep = HorizontalSeparator
class Sizegrip(Element):
    """
        Sizegrip element will """
    def __init__(self, background_color=..., pad=..., p=..., key=..., k=...) -> None:
        """
        Sizegrip Element
    """
        ...
    


SGrip = Sizegrip
class Tab(Element):
    """
    Tab Element is another "Co"""
    def __init__(self, title, layout, title_color=..., background_color=..., font=..., pad=..., p=..., disabled=..., border_width=..., key=..., k=..., tooltip=..., right_click_menu=..., expand_x=..., expand_y=..., visible=..., element_justification=..., image_source=..., image_subsample=..., metadata=...) -> None:
        """
        :param title:         """
        ...
    
    def add_row(self, *args): # -> None:
        """
        Not recommended use ca"""
        ...
    
    def layout(self, rows): # -> Self@Tab:
        """
        Not user callable.  Us"""
        ...
    
    def update(self, title=..., disabled=..., visible=...): # -> Self@Tab | None:
        """
        Changes some of the se"""
        ...
    
    def select(self): # -> None:
        """
        Create a tkinter event"""
        ...
    
    AddRow = ...
    Layout = ...
    Select = ...
    Update = ...


class TabGroup(Element):
    """
    TabGroup Element groups to"""
    def __init__(self, layout, tab_location=..., title_color=..., tab_background_color=..., selected_title_color=..., selected_background_color=..., background_color=..., focus_color=..., font=..., change_submits=..., enable_events=..., pad=..., p=..., border_width=..., tab_border_width=..., theme=..., key=..., k=..., size=..., s=..., tooltip=..., right_click_menu=..., expand_x=..., expand_y=..., visible=..., metadata=...) -> None:
        """
        :param layout:        """
        ...
    
    def add_row(self, *args): # -> None:
        """
        Not recommended user c"""
        ...
    
    def layout(self, rows): # -> Self@TabGroup:
        """
        Can use like the Windo"""
        ...
    
    def find_key_from_tab_name(self, tab_name): # -> None:
        """
        Searches through the l"""
        ...
    
    def get(self): # -> None:
        """
        Returns the current va"""
        ...
    
    def add_tab(self, tab_element):
        """
        Add a new tab to an ex"""
        ...
    
    AddRow = ...
    FindKeyFromTabName = ...
    Get = ...
    Layout = ...


class Slider(Element):
    """
    A slider, horizontal or ve"""
    def __init__(self, range=..., default_value=..., resolution=..., tick_interval=..., orientation=..., disable_number_display=..., border_width=..., relief=..., change_submits=..., enable_events=..., disabled=..., size=..., s=..., font=..., background_color=..., text_color=..., trough_color=..., key=..., k=..., pad=..., p=..., expand_x=..., expand_y=..., tooltip=..., visible=..., metadata=...) -> None:
        """
        :param range:         """
        ...
    
    def update(self, value=..., range=..., disabled=..., visible=...):
        """
        Changes some of the se"""
        ...
    
    Update = ...


Sl = Slider
class TkFixedFrame(tk.Frame):
    """
    A tkinter frame that is us"""
    def __init__(self, master, **kwargs) -> None:
        """
        :param master:   The p"""
        ...
    


class TkScrollableFrame(tk.Frame):
    """
    A frame with one or two sc"""
    def __init__(self, master, vertical_only, **kwargs) -> None:
        """
        :param master:        """
        ...
    
    def hookMouseWheel(self, e): # -> None:
        ...
    
    def unhookMouseWheel(self, e): # -> None:
        ...
    
    def resize_frame(self, e): # -> None:
        ...
    
    def yscroll(self, event): # -> None:
        ...
    
    def xscroll(self, event): # -> None:
        ...
    
    def bind_mouse_scroll(self, parent, mode): # -> None:
        ...
    
    def set_scrollregion(self, event=...): # -> None:
        """ Set the scroll region on the ca"""
        ...
    


class Column(Element):
    """
    A container element that i"""
    def __init__(self, layout, background_color=..., size=..., s=..., pad=..., p=..., scrollable=..., vertical_scroll_only=..., right_click_menu=..., key=..., k=..., visible=..., justification=..., element_justification=..., vertical_alignment=..., grab=..., expand_x=..., expand_y=..., metadata=...) -> None:
        """
        :param layout:        """
        ...
    
    def add_row(self, *args): # -> None:
        """
        Not recommended user c"""
        ...
    
    def layout(self, rows): # -> Self@Column:
        """
        Can use like the Windo"""
        ...
    
    def update(self, visible=...) -> None:
        """
        Changes some of the se"""
        ...
    
    def contents_changed(self): # -> None:
        """
        When a scrollable colu"""
        ...
    
    AddRow = ...
    Layout = ...
    Update = ...


Col = Column
class Pane(Element):
    """
    A sliding Pane that is uni"""
    def __init__(self, pane_list, background_color=..., size=..., s=..., pad=..., p=..., orientation=..., show_handle=..., relief=..., handle_size=..., border_width=..., key=..., k=..., expand_x=..., expand_y=..., visible=..., metadata=...) -> None:
        """
        :param pane_list:     """
        ...
    
    def update(self, visible=...): # -> None:
        """
        Changes some of the se"""
        ...
    
    Update = ...


class TKCalendar(ttk.Frame):
    """
    This code was shamelessly """
    datetime = ...
    timedelta = ...
    def __init__(self, master=..., target_element=..., close_when_chosen=..., default_date=..., **kw) -> None:
        """WIDGET-SPECIFIC OPTIONS: locale,"""
        ...
    
    def __setitem__(self, item, value): # -> None:
        ...
    
    def __getitem__(self, item): # -> Any:
        ...
    
    @property
    def selection(self): # -> None:
        ...
    


class Menu(Element):
    """
    Menu Element is the Elemen"""
    def __init__(self, menu_definition, background_color=..., text_color=..., disabled_text_color=..., size=..., s=..., tearoff=..., font=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...) -> None:
        """
        :param menu_definition"""
        ...
    
    def update(self, menu_definition=..., visible=...):
        """
        Update a menubar - can"""
        ...
    
    Update = ...


MenuBar = Menu
Menubar = Menu
class Table(Element):
    def __init__(self, values, headings=..., visible_column_map=..., col_widths=..., def_col_width=..., auto_size_columns=..., max_col_width=..., select_mode=..., display_row_numbers=..., num_rows=..., row_height=..., font=..., justification=..., text_color=..., background_color=..., alternating_row_color=..., selected_row_colors=..., header_text_color=..., header_background_color=..., header_font=..., header_border_width=..., header_relief=..., row_colors=..., vertical_scroll_only=..., hide_vertical_scroll=..., border_width=..., size=..., s=..., change_submits=..., enable_events=..., enable_click_events=..., right_click_selects=..., bind_return_key=..., pad=..., p=..., key=..., k=..., tooltip=..., right_click_menu=..., expand_x=..., expand_y=..., visible=..., metadata=...) -> None:
        """
        :param values:        """
        ...
    
    def update(self, values=..., num_rows=..., visible=..., select_rows=..., alternating_row_color=..., row_colors=...):
        """
        Changes some of the se"""
        ...
    
    def get(self):
        """
        Dummy function for tki"""
        ...
    
    def get_last_clicked_position(self): # -> tuple[None, None] | tuple[int | None, int | None]:
        """
        Returns a tuple with t"""
        ...
    
    Update = ...
    Get = ...


class Tree(Element):
    """
    Tree Element - Presents da"""
    def __init__(self, data=..., headings=..., visible_column_map=..., col_widths=..., col0_width=..., col0_heading=..., def_col_width=..., auto_size_columns=..., max_col_width=..., select_mode=..., show_expanded=..., change_submits=..., enable_events=..., font=..., justification=..., text_color=..., border_width=..., background_color=..., selected_row_colors=..., header_text_color=..., header_background_color=..., header_font=..., header_border_width=..., header_relief=..., num_rows=..., row_height=..., pad=..., p=..., key=..., k=..., tooltip=..., right_click_menu=..., expand_x=..., expand_y=..., visible=..., metadata=...) -> None:
        """
        :param data:          """
        ...
    
    def add_treeview_data(self, node):
        """
        Not a user function.  """
        ...
    
    def update(self, values=..., key=..., value=..., text=..., icon=..., visible=...):
        """
        Changes some of the se"""
        ...
    
    Update = ...


class TreeData:
    """
    Class that user fills in t"""
    class Node:
        """
        Contains information a"""
        def __init__(self, parent, key, text, values, icon=...) -> None:
            """
            Represents a node """
            ...
        
    
    
    def __init__(self) -> None:
        """
        Instantiate the object"""
        ...
    
    def insert(self, parent, key, text, values, icon=...): # -> None:
        """
        Inserts a node into th"""
        ...
    
    def __repr__(self): # -> str:
        """
        Converts the TreeData """
        ...
    
    Insert = ...


class ErrorElement(Element):
    """
    A "dummy Element" that is """
    def __init__(self, key=..., metadata=...) -> None:
        """
        :param key: Used with """
        ...
    
    def update(self, silent_on_error=..., *args, **kwargs): # -> Self@ErrorElement:
        """
        Update method for the """
        ...
    
    def get(self): # -> Literal['This is NOT a valid Element!\nSTOP trying to do thi…']:
        """
        One of the method name"""
        ...
    
    Get = ...
    Update = ...


def Stretch(background_color: str | None) -> Text:
    """
    Acts like a Stretch elemen"""
    ...

Push = Stretch
P = Stretch
def VStretch(background_color: str | None) -> Text:
    """
    Acts like a Stretch elemen"""
    ...

VPush = VStretch
VP = VStretch
class Window():
    """
    Represents a single Window"""
    NumOpenWindows = ...
    _user_defined_icon = ...
    hidden_master_root: tk.Tk = ...
    _animated_popup_dict: Dict = ...
    _active_windows: Dict[Window, tk.Tk()] = ...
    _move_all_windows = ...
    _window_that_exited: Window = ...
    _root_running_mainloop: tk.Tk() = ...
    _timeout_key = ...
    _TKAfterID = ...
    _window_running_mainloop = ...
    _container_element_counter = ...
    _read_call_from_debugger = ...
    _timeout_0_counter = ...
    _counter_for_ttk_widgets = ...
    _floating_debug_window_build_needed = ...
    _main_debug_window_build_needed = ...
    def __init__(self, title, layout=..., default_element_size=..., default_button_element_size=..., auto_size_text=..., auto_size_buttons=..., location=..., relative_location=..., size=..., element_padding=..., margins=..., button_color=..., font=..., progress_bar_color=..., background_color=..., border_depth=..., auto_close=..., auto_close_duration=..., icon=..., force_toplevel=..., alpha_channel=..., return_keyboard_events=..., use_default_focus=..., text_justification=..., no_titlebar=..., grab_anywhere=..., grab_anywhere_using_control=..., keep_on_top=..., resizable=..., disable_close=..., disable_minimize=..., right_click_menu=..., transparent_color=..., debugger_enabled=..., right_click_menu_background_color=..., right_click_menu_text_color=..., right_click_menu_disabled_text_color=..., right_click_menu_selected_colors=..., right_click_menu_font=..., right_click_menu_tearoff=..., finalize=..., element_justification=..., ttk_theme=..., use_ttk_buttons=..., modal=..., enable_close_attempted_event=..., titlebar_background_color=..., titlebar_text_color=..., titlebar_font=..., titlebar_icon=..., use_custom_titlebar=..., scaling=..., metadata=...) -> None:
        """
        :param title:         """
        ...
    
    @classmethod
    def get_screen_size(self) -> tuple[int, int]:
        """
        This is a "Class Metho"""
        ...
    
    @property
    def metadata(self): # -> Any:
        """
        Metadata is available """
        ...
    
    @metadata.setter
    def metadata(self, value): # -> None:
        """
        Metadata is available """
        ...
    
    def add_row(self, *args): # -> None:
        """
        Adds a single row of e"""
        ...
    
    def add_rows(self, rows): # -> None:
        """
        Loops through a list o"""
        ...
    
    def layout(self, rows): # -> Self@Window:
        """
        Second of two preferre"""
        ...
    
    def extend_layout(self, container, rows): # -> Self@Window:
        """
        Adds new rows to an ex"""
        ...
    
    def LayoutAndRead(self, rows, non_blocking=...):
        """
        Deprecated!!  Now your"""
        ...
    
    def LayoutAndShow(self, rows):
        """
        Deprecated - do not us"""
        ...
    
    def set_icon(self, icon=..., pngbase64=...):
        """
        Changes the icon that """
        ...
    
    def read(self, timeout:int|float|None=..., timeout_key:str=..., close:bool=...) -> tuple[str|None, dict[str|int|tuple[Any],str]]:
        """
        THE biggest deal metho"""
        ...
    
    def finalize(self): # -> Self@Window:
        """
        Use this method to cau"""
        ...
    
    def refresh(self): # -> Self@Window:
        """
        Refreshes the window b"""
        ...
    
    def fill(self, values_dict): # -> Self@Window:
        """
        Fill in elements that """
        ...
    
    def FindElement(self, key, silent_on_error=...): # -> ErrorElement:
        """
        ** Warning ** This cal"""
        ...
    
    def find_element(self, key, silent_on_error=...): # -> ErrorElement:
        """
        Find element object as"""
        ...
    
    Element = ...
    Find = ...
    Elem = ...
    def find_element_with_focus(self): # -> None:
        """
        Returns the Element th"""
        ...
    
    def widget_to_element(self, widget): # -> None:
        """
        Returns the element th"""
        ...
    
    def element_list(self): # -> list[Unknown]:
        """
        Returns a list of all """
        ...
    
    def save_to_disk(self, filename):
        """
        Saves the values conta"""
        ...
    
    def load_from_disk(self, filename): # -> None:
        """
        Restore values from a """
        ...
    
    def get_screen_dimensions(self): # -> tuple[int, int]:
        """
        Get the screen dimensi"""
        ...
    
    def move(self, x, y): # -> None:
        """
        Move the upper left co"""
        ...
    
    def move_to_center(self): # -> None:
        """
        Recenter your window a"""
        ...
    
    def minimize(self): # -> None:
        """
        Minimize this window t"""
        ...
    
    def maximize(self) -> None:
        """
        Maximize the window. T"""
        ...
    
    def normal(self): # -> None:
        """
        Restore a window to a """
        ...
    
    def close(self) -> None:
        """
        Closes window.  Users """
        ...
    
    def disable(self): # -> None:
        """
        Disables window from t"""
        ...
    
    def enable(self): # -> None:
        """
        Re-enables window to t"""
        ...
    
    def hide(self): # -> None:
        """
        Hides the window from """
        ...
    
    def un_hide(self): # -> None:
        """
        Used to bring back a w"""
        ...
    
    def disappear(self): # -> None:
        """
        Causes a window to "di"""
        ...
    
    def reappear(self): # -> None:
        """
        Causes a window previo"""
        ...
    
    def set_alpha(self, alpha): # -> None:
        """
        Sets the Alpha Channel"""
        ...
    
    @property
    def alpha_channel(self): # -> Unknown:
        """
        A property that change"""
        ...
    
    @alpha_channel.setter
    def alpha_channel(self, alpha): # -> None:
        """
        The setter method for """
        ...
    
    def bring_to_front(self): # -> None:
        """
        Brings this window to """
        ...
    
    def send_to_back(self): # -> None:
        """
        Pushes this window to """
        ...
    
    def keep_on_top_set(self): # -> None:
        """
        Sets keep_on_top after"""
        ...
    
    def keep_on_top_clear(self): # -> None:
        """
        Clears keep_on_top aft"""
        ...
    
    def current_location(self, more_accurate=...):
        """
        Get the current locati"""
        ...
    
    def current_size_accurate(self): # -> tuple[None, None] | tuple[int | None, int | None]:
        """
        Get the current locati"""
        ...
    
    @property
    def size(self): # -> tuple[None, None] | tuple[int, int]:
        """
        Return the current siz"""
        ...
    
    @size.setter
    def size(self, size): # -> None:
        """
        Changes the size of th"""
        ...
    
    def set_min_size(self, size): # -> None:
        """
        Changes the minimum si"""
        ...
    
    def visibility_changed(self): # -> None:
        """
        When making an element"""
        ...
    
    def set_transparent_color(self, color): # -> None:
        """
        Set the color that wil"""
        ...
    
    def mouse_location(self): # -> tuple[Literal[0], Literal[0]] | tuple[int, int]:
        """
        Return the (x,y) locat"""
        ...
    
    def grab_any_where_on(self): # -> None:
        """
        Turns on Grab Anywhere"""
        ...
    
    def grab_any_where_off(self): # -> None:
        """
        Turns off Grab Anywher"""
        ...
    
    def bind(self, bind_string, key, propagate=...): # -> None:
        """
        Used to add tkinter ev"""
        ...
    
    def enable_debugger(self): # -> None:
        """
        Enables the internal d"""
        ...
    
    def disable_debugger(self): # -> None:
        """
        Disable the internal d"""
        ...
    
    def set_title(self, title): # -> None:
        """
        Change the title of th"""
        ...
    
    def make_modal(self): # -> None:
        """
        Makes a window into a """
        ...
    
    def force_focus(self): # -> None:
        """
        Forces this window to """
        ...
    
    def was_closed(self): # -> bool:
        """
        Returns True if the wi"""
        ...
    
    def set_cursor(self, cursor): # -> None:
        """
        Sets the cursor for th"""
        ...
    
    def ding(self, display_number=...): # -> None:
        """
        Make a "bell" sound. A"""
        ...
    
    def write_event_value(self, key, value): # -> None:
        """
        Adds a key & value tup"""
        ...
    
    def perform_long_operation(self, func, end_key): # -> Thread:
        """
        Call your function tha"""
        ...
    
    @property
    def key_dict(self): # -> dict[Unknown, Unknown]:
        """
        Returns a dictionary w"""
        ...
    
    def __getitem__(self, key:str) -> Element:
        """
        Returns Element that m"""
        ...
    
    def __call__(self, *args, **kwargs):
        """
        Call window.read but w"""
        ...
    
    AddRow = ...
    AddRows = ...
    AlphaChannel = ...
    BringToFront = ...
    Close = ...
    CurrentLocation = ...
    Disable = ...
    DisableDebugger = ...
    Disappear = ...
    Enable = ...
    EnableDebugger = ...
    Fill = ...
    Finalize = ...
    FindElementWithFocus = ...
    GetScreenDimensions = ...
    GrabAnyWhereOff = ...
    GrabAnyWhereOn = ...
    Hide = ...
    Layout = ...
    LoadFromDisk = ...
    Maximize = ...
    Minimize = ...
    Move = ...
    Normal = ...
    Read = ...
    Reappear = ...
    Refresh = ...
    SaveToDisk = ...
    SendToBack = ...
    SetAlpha = ...
    SetIcon = ...
    SetTransparentColor = ...
    Size = ...
    UnHide = ...
    VisibilityChanged = ...
    CloseNonBlocking = ...
    CloseNonBlockingForm = ...
    start_thread = ...


FlexForm = Window
def read_all_windows(timeout=..., timeout_key=...):
    """
    Reads all windows that are"""
    ...

SYSTEM_TRAY_WIN_MARGINS = ...
SYSTEM_TRAY_MESSAGE_MAX_LINE_LENGTH = ...
SYSTEM_TRAY_MESSAGE_WIN_COLOR = ...
SYSTEM_TRAY_MESSAGE_TEXT_COLOR = ...
SYSTEM_TRAY_MESSAGE_DISPLAY_DURATION_IN_MILLISECONDS = ...
SYSTEM_TRAY_MESSAGE_FADE_IN_DURATION = ...
EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED = ...
EVENT_SYSTEM_TRAY_ICON_ACTIVATED = ...
EVENT_SYSTEM_TRAY_MESSAGE_CLICKED = ...
_tray_icon_error = ...
_tray_icon_success = ...
_tray_icon_halt = ...
_tray_icon_notallowed = ...
_tray_icon_stop = ...
_tray_icon_exclamation = ...
_tray_icon_none = ...
SYSTEM_TRAY_MESSAGE_ICON_INFORMATION = ...
SYSTEM_TRAY_MESSAGE_ICON_WARNING = ...
SYSTEM_TRAY_MESSAGE_ICON_CRITICAL = ...
SYSTEM_TRAY_MESSAGE_ICON_NOICON = ...
class SystemTray:
    """
    A "Simulated System Tray" """
    def __init__(self, menu=..., filename=..., data=..., data_base64=..., tooltip=..., metadata=...) -> None:
        """
        SystemTray - create an"""
        ...
    
    @property
    def metadata(self): # -> None:
        """
        Metadata is an SystemT"""
        ...
    
    @metadata.setter
    def metadata(self, value): # -> None:
        """
        Metadata is an SystemT"""
        ...
    
    def read(self, timeout=...): # -> Literal['__DOUBLE_CLICKED__', '__ACTIVATED__']:
        """
        Reads the context menu"""
        ...
    
    def hide(self): # -> None:
        """
        Hides the icon
      """
        ...
    
    def un_hide(self): # -> None:
        """
        Restores a previously """
        ...
    
    def show_message(self, title, message, filename=..., data=..., data_base64=..., messageicon=..., time=...):
        """
        Shows a balloon above """
        ...
    
    def close(self): # -> None:
        """
        Close the system tray """
        ...
    
    def update(self, menu=..., tooltip=..., filename=..., data=..., data_base64=...): # -> None:
        """
        Updates the menu, tool"""
        ...
    
    @classmethod
    def notify(cls, title, message, icon=..., display_duration_in_ms=..., fade_in_duration=..., alpha=..., location=...):
        """
        Displays a "notificati"""
        ...
    
    Close = ...
    Hide = ...
    Read = ...
    ShowMessage = ...
    UnHide = ...
    Update = ...


def Sizer(h_pixels=..., v_pixels=...): # -> Column:
    """
    "Pushes" out the size of w"""
    ...

def pin(elem, vertical_alignment=..., shrink=..., expand_x=..., expand_y=...): # -> Column:
    """
    Pin's an element provided """
    ...

def vtop(elem_or_row, expand_x=..., expand_y=...): # -> list[Column] | Column:
    """
    Align an element or a row """
    ...

def vcenter(elem_or_row, expand_x=..., expand_y=...): # -> list[Column] | Column:
    """
    Align an element or a row """
    ...

def vbottom(elem_or_row, expand_x=..., expand_y=...): # -> list[Column] | Column:
    """
    Align an element or a row """
    ...

def Titlebar(title=..., icon=..., text_color=..., background_color=..., font=..., key=..., k=...):
    """
    A custom titlebar that rep"""
    ...

MenuLayout = list[list[str | list[str]]]

def MenubarCustom(menu_definition:MenuLayout=[[]], disabled_text_color:str|None=None, bar_font:str|None=None, font:str|None=None, tearoff:str|None=None, pad:int|None=None, p:int|None=None, background_color:str|None=None, text_color:str|None=None, bar_background_color:str|None=None, bar_text_color:str|None=None, key:str|None=None, k:str|None=None) -> Column:
    """
    A custom Menubar that repl"""
    ...

def FolderBrowse(button_text=..., target=..., initial_folder=..., tooltip=..., size=..., s=..., auto_size_button=..., button_color=..., disabled=..., change_submits=..., enable_events=..., font=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """
    :param button_text:      t"""
    ...

def FileBrowse(button_text=..., target=..., file_types=..., initial_folder=..., tooltip=..., size=..., s=..., auto_size_button=..., button_color=..., change_submits=..., enable_events=..., font=..., disabled=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def FilesBrowse(button_text=..., target=..., file_types=..., disabled=..., initial_folder=..., tooltip=..., size=..., s=..., auto_size_button=..., button_color=..., change_submits=..., enable_events=..., font=..., pad=..., p=..., key=..., k=..., visible=..., files_delimiter=..., metadata=...): # -> Button:
    """
    Allows browsing of multipl"""
    ...

def FileSaveAs(button_text=..., target=..., file_types=..., initial_folder=..., default_extension=..., disabled=..., tooltip=..., size=..., s=..., auto_size_button=..., button_color=..., change_submits=..., enable_events=..., font=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def SaveAs(button_text=..., target=..., file_types=..., initial_folder=..., default_extension=..., disabled=..., tooltip=..., size=..., s=..., auto_size_button=..., button_color=..., change_submits=..., enable_events=..., font=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def Save(button_text=..., size=..., s=..., auto_size_button=..., button_color=..., bind_return_key=..., disabled=..., tooltip=..., font=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def Submit(button_text=..., size=..., s=..., auto_size_button=..., button_color=..., disabled=..., bind_return_key=..., tooltip=..., font=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def Open(button_text=..., size=..., s=..., auto_size_button=..., button_color=..., disabled=..., bind_return_key=..., tooltip=..., font=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def OK(button_text=..., size=..., s=..., auto_size_button=..., button_color=..., disabled=..., bind_return_key=..., tooltip=..., font=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def Ok(button_text=..., size=..., s=..., auto_size_button=..., button_color=..., disabled=..., bind_return_key=..., tooltip=..., font=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def Cancel(button_text=..., size=..., s=..., auto_size_button=..., button_color=..., disabled=..., tooltip=..., font=..., bind_return_key=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def Quit(button_text=..., size=..., s=..., auto_size_button=..., button_color=..., disabled=..., tooltip=..., font=..., bind_return_key=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def Exit(button_text=..., size=..., s=..., auto_size_button=..., button_color=..., disabled=..., tooltip=..., font=..., bind_return_key=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def Yes(button_text=..., size=..., s=..., auto_size_button=..., button_color=..., disabled=..., tooltip=..., font=..., bind_return_key=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def No(button_text=..., size=..., s=..., auto_size_button=..., button_color=..., disabled=..., tooltip=..., font=..., bind_return_key=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def Help(button_text=..., size=..., s=..., auto_size_button=..., button_color=..., disabled=..., font=..., tooltip=..., bind_return_key=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def Debug(button_text=..., size=..., s=..., auto_size_button=..., button_color=..., disabled=..., font=..., tooltip=..., bind_return_key=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """
    This Button has been chang"""
    ...

def SimpleButton(button_text, image_filename=..., image_data=..., image_size=..., image_subsample=..., border_width=..., tooltip=..., size=..., s=..., auto_size_button=..., button_color=..., font=..., bind_return_key=..., disabled=..., focus=..., pad=..., p=..., key=..., k=..., metadata=...): # -> Button:
    """
    DEPIRCATED

    This But"""
    ...

def CloseButton(button_text, image_filename=..., image_data=..., image_size=..., image_subsample=..., border_width=..., tooltip=..., size=..., s=..., auto_size_button=..., button_color=..., font=..., bind_return_key=..., disabled=..., focus=..., pad=..., p=..., key=..., k=..., metadata=...): # -> Button:
    """
    DEPRICATED

    This but"""
    ...

CButton = ...
def ReadButton(button_text, image_filename=..., image_data=..., image_size=..., image_subsample=..., border_width=..., tooltip=..., size=..., s=..., auto_size_button=..., button_color=..., font=..., bind_return_key=..., disabled=..., focus=..., pad=..., p=..., key=..., k=..., metadata=...): # -> Button:
    """
    :param button_text:      t"""
    ...

ReadFormButton = ...
RButton = ...
def RealtimeButton(button_text, image_filename=..., image_data=..., image_size=..., image_subsample=..., border_width=..., tooltip=..., size=..., s=..., auto_size_button=..., button_color=..., font=..., disabled=..., bind_return_key=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def DummyButton(button_text, image_filename=..., image_data=..., image_size=..., image_subsample=..., border_width=..., tooltip=..., size=..., s=..., auto_size_button=..., button_color=..., font=..., disabled=..., bind_return_key=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """
    This is a special type of """
    ...

def CalendarButton(button_text, target=..., close_when_date_chosen=..., default_date_m_d_y=..., image_filename=..., image_data=..., image_size=..., image_subsample=..., tooltip=..., border_width=..., size=..., s=..., auto_size_button=..., button_color=..., disabled=..., font=..., bind_return_key=..., focus=..., pad=..., p=..., enable_events=..., key=..., k=..., visible=..., locale=..., format=..., begin_at_sunday_plus=..., month_names=..., day_abbreviations=..., title=..., no_titlebar=..., location=..., metadata=...): # -> Button:
    """
    Button that will show a ca"""
    ...

def ColorChooserButton(button_text, target=..., image_filename=..., image_data=..., image_size=..., image_subsample=..., tooltip=..., border_width=..., size=..., s=..., auto_size_button=..., button_color=..., disabled=..., font=..., bind_return_key=..., focus=..., pad=..., p=..., key=..., k=..., visible=..., metadata=...): # -> Button:
    """

    :param button_text:     """
    ...

def button_color_to_tuple(color_tuple_or_string, default=...): # -> tuple[Literal['1234567890'], Literal['1234567890']]:
    """
    Convert a color tuple or c"""
    ...

def AddToReturnDictionary(form, element, value): # -> None:
    ...

def AddToReturnList(form, value): # -> None:
    ...

def InitializeResults(form): # -> None:
    ...

def DecodeRadioRowCol(RadValue): # -> tuple[Unknown, Unknown, Unknown]:
    ...

def EncodeRadioRowCol(container, row, col):
    ...

def fill_form_with_values(window, values_dict): # -> None:
    """
    Fills a window with values"""
    ...

def AddMenuItem(top_menu, sub_menu_info, element, is_sub_menu=..., skip=..., right_click_menu=...):
    """
    Only to be used internally"""
    ...

class VarHolder:
    canvas_holder = ...
    def __init__(self) -> None:
        ...
    


class Stylist:
    @staticmethod
    def get_elements(layout): # -> list[Unknown]:
        """Return a list of elements contai"""
        ...
    
    @staticmethod
    def get_options(ttkstyle, theme=...): # -> list[Unknown]:
        ...
    
    @staticmethod
    def create_style(base_style: str, theme=..., **kwargs): # -> str:
        ...
    


def PackFormIntoFrame(form, containing_frame, toplevel_form):
    """

    :param form:            """
    ...

def StartupTK(window): # -> None:
    """
    NOT user callable
    Cre"""
    ...

def convert_args_to_single_string(*args): # -> tuple[str, int, Unknown | int]:
    """

    :param *args:
    :type"""
    ...

METER_REASON_CANCELLED = ...
METER_REASON_CLOSED = ...
METER_REASON_REACHED_MAX = ...
METER_OK = ...
METER_STOPPED = ...
class QuickMeter:
    active_meters = ...
    exit_reasons = ...
    def __init__(self, title, current_value, max_value, key, *args, orientation=..., bar_color=..., button_color=..., size=..., border_width=..., grab_anywhere=..., no_titlebar=..., keep_on_top=..., no_button=...) -> None:
        """

        :param title:       """
        ...
    
    def BuildWindow(self, *args): # -> Window:
        ...
    
    def UpdateMeter(self, current_value, max_value, *args): # -> Literal[True]:
        ...
    
    def ComputeProgressStats(self): # -> list[str]:
        ...
    


def one_line_progress_meter(title, current_value, max_value, *args, key=..., orientation=..., bar_color=..., button_color=..., size=..., border_width=..., grab_anywhere=..., no_titlebar=..., keep_on_top=..., no_button=...): # -> bool:
    """
    :param title:         text"""
    ...

def one_line_progress_meter_cancel(key=...): # -> None:
    """
    Cancels and closes a previ"""
    ...

def get_complimentary_hex(color): # -> str:
    """
    :param color: color string"""
    ...

class _DebugWin:
    debug_window = ...
    def __init__(self, size=..., location=..., relative_location=..., font=..., no_titlebar=..., no_button=..., grab_anywhere=..., keep_on_top=..., do_not_reroute_stdout=..., echo_stdout=..., resizable=...) -> None:
        """

        :param size:        """
        ...
    
    def Print(self, *args, end=..., sep=..., text_color=..., background_color=..., erase_all=..., font=...):
        ...
    
    def Close(self): # -> None:
        ...
    


def easy_print(*args, size=..., end=..., sep=..., location=..., relative_location=..., font=..., no_titlebar=..., no_button=..., grab_anywhere=..., keep_on_top=..., do_not_reroute_stdout=..., echo_stdout=..., text_color=..., background_color=..., colors=..., c=..., erase_all=..., resizable=...): # -> None:
    """
    Works like a "print" state"""
    ...

def easy_print_close(): # -> None:
    """
    Close a previously opened """
    ...

CPRINT_DESTINATION_WINDOW = ...
CPRINT_DESTINATION_MULTILINE_ELMENT_KEY = ...
def cprint_set_output_destination(window, multiline_key): # -> None:
    """
    Sets up the color print (c"""
    ...

def cprint(*args, end=..., sep=..., text_color=..., font=..., t=..., background_color=..., b=..., colors=..., c=..., window=..., key=..., justification=..., autoscroll=...):
    """
    Color print to a multiline"""
    ...

def set_global_icon(icon): # -> None:
    """
    Sets the icon which will b"""
    ...

def set_options(icon=..., button_color=..., element_size=..., button_element_size=..., margins=..., element_padding=..., auto_size_text=..., auto_size_buttons=..., font=..., border_width=..., slider_border_width=..., slider_relief=..., slider_orientation=..., autoclose_time=..., message_box_line_width=..., progress_meter_border_depth=..., progress_meter_style=..., progress_meter_relief=..., progress_meter_color=..., progress_meter_size=..., text_justification=..., background_color=..., element_background_color=..., text_element_background_color=..., input_elements_background_color=..., input_text_color=..., scrollbar_color=..., text_color=..., element_text_color=..., debug_win_size=..., window_location=..., error_button_color=..., tooltip_time=..., tooltip_font=..., use_ttk_buttons=..., ttk_theme=..., suppress_error_popups=..., suppress_raise_key_errors=..., suppress_key_guessing=..., warn_button_key_duplicates=..., enable_treeview_869_patch=..., enable_mac_notitlebar_patch=..., use_custom_titlebar=..., titlebar_background_color=..., titlebar_text_color=..., titlebar_font=..., titlebar_icon=..., user_settings_path=..., pysimplegui_settings_path=..., pysimplegui_settings_filename=..., keep_on_top=..., dpi_awareness=..., scaling=..., disable_modal_windows=..., force_modal_windows=..., tooltip_offset=...) -> bool:
    """
    :param icon:              """
    ...

LOOK_AND_FEEL_TABLE = ...
def list_of_look_and_feel_values(): # -> list[str]:
    """
    Get a list of the valid va"""
    ...

def theme(new_theme: str = ...) -> str:
    """
    Sets / Gets the current Th"""
    ...

def theme_background_color(color=...): # -> None:
    """
    Sets/Returns the backgroun"""
    ...

TRANSPARENT_BUTTON = ...
def theme_element_background_color(color=...): # -> None:
    """
    Sets/Returns the backgroun"""
    ...

def theme_text_color(color=...): # -> Literal['1234567890']:
    """
    Sets/Returns the text colo"""
    ...

def theme_text_element_background_color(color=...): # -> None:
    """
    Sets/Returns the backgroun"""
    ...

def theme_input_background_color(color=...): # -> Literal['1234567890']:
    """
    Sets/Returns the input ele"""
    ...

def theme_input_text_color(color=...): # -> Literal['1234567890']:
    """
    Sets/Returns the input ele"""
    ...

def theme_button_color(color=...): # -> tuple[Literal['white'], Literal['#082567']]:
    """
    Sets/Returns the button co"""
    ...

def theme_progress_bar_color(color=...): # -> tuple[Literal['#01826B'], Literal['#D0D0D0']]:
    """
    Sets/Returns the progress """
    ...

def theme_slider_color(color=...): # -> None:
    """
    Sets/Returns the slider co"""
    ...

def theme_border_width(border_width=...): # -> Literal[1]:
    """
    Sets/Returns the border wi"""
    ...

def theme_slider_border_width(border_width=...): # -> Literal[1]:
    """
    Sets/Returns the slider bo"""
    ...

def theme_progress_bar_border_width(border_width=...): # -> Literal[1]:
    """
    Sets/Returns the progress """
    ...

def theme_element_text_color(color=...): # -> Literal['1234567890']:
    """
    Sets/Returns the text colo"""
    ...

def theme_list(): # -> list[str]:
    """
    Returns a sorted list of t"""
    ...
RGBStr = str

class ThemeDefinition(TypedDict):
    BACKGROUND : RGBStr
    TEXT : RGBStr
    INPUT : RGBStr
    TEXT_INPUT : RGBStr
    SCROLL : RGBStr
    BUTTON : tuple[RGBStr,RGBStr]
    PROGRESS : tuple[RGBStr,RGBStr]
    BORDER : int
    SLIDER_DEPTH : int
    PROGRESS_DEPTH : int

    ACCENT1 : Optional[RGBStr]
    ACCENT2 : Optional[RGBStr]
    ACCENT3 : Optional[RGBStr]

    COLOR_LIST : Optional[list[RGBStr]]
    BG_LIST : Optional[list[RGBStr]]
    FG_LIST : Optional[list[RGBStr]]
    BD_COLOR : Optional[RGBStr]
    FONT_FAMILY : Optional[str]

def theme_add_new(new_theme_name: str, new_theme_dict: ThemeDefinition) -> None:
    """
    Add a new theme to the dic"""
    ...

def theme_global(new_theme=...): # -> Any | str | None:
    """
    Sets / Gets the global PyS"""
    ...

def theme_previewer(columns=..., scrollable=..., scroll_area_size=..., search_string=..., location=...): # -> None:
    """
    Displays a "Quick Referenc"""
    ...

preview_all_look_and_feel_themes = ...
def theme_previewer_swatches(): # -> None:
    """
    Display themes in a window"""
    ...

def change_look_and_feel(index, force=...):
    """
    Change the "color scheme" """
    ...

def obj_to_string_single_obj(obj): # -> str:
    """
    Dumps an Object's values a"""
    ...

def obj_to_string(obj, extra=...): # -> str:
    """
    Dumps an Object's values a"""
    ...

def clipboard_set(new_value): # -> None:
    """
    Sets the clipboard to a sp"""
    ...

def clipboard_get(): # -> str:
    """
    Gets the clipboard current"""
    ...

def popup(*args, title=..., button_color=..., background_color=..., text_color=..., button_type=..., auto_close=..., auto_close_duration=..., custom_text=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., any_key_closes=..., image=..., modal=...):
    """
    Popup - Display a popup Wi"""
    ...

def MsgBox(*args):
    """
    Do not call this anymore i"""
    ...

def popup_scrolled(*args, title=..., button_color=..., background_color=..., text_color=..., yes_no=..., auto_close=..., auto_close_duration=..., size=..., location=..., relative_location=..., non_blocking=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., font=..., image=..., icon=..., modal=..., no_sizegrip=...):
    """
    Show a scrolled Popup wind"""
    ...

def popup_no_buttons(*args, title=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., image=..., modal=...): # -> None:
    """Show a Popup but without any but"""
    ...

def popup_non_blocking(*args, title=..., button_type=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., image=..., modal=...):
    """
    Show Popup window and imme"""
    ...

def popup_quick(*args, title=..., button_type=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., image=..., modal=...):
    """
    Show Popup box that doesn'"""
    ...

def popup_quick_message(*args, title=..., button_type=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., image=..., modal=...):
    """
    Show Popup window with no """
    ...

def popup_no_titlebar(*args, title=..., button_type=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., image=..., modal=...):
    """
    Display a Popup without a """
    ...

def popup_auto_close(*args, title=..., button_type=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., image=..., modal=...):
    """Popup that closes itself after s"""
    ...

def popup_error(*args, title=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., image=..., modal=...):
    """
    Popup with colored button """
    ...

def popup_cancel(*args, title=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., image=..., modal=...):
    """
    Display Popup with "cancel"""
    ...

def popup_ok(*args, title=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., image=..., modal=...):
    """
    Display Popup with OK butt"""
    ...

def popup_ok_cancel(*args, title=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., image=..., modal=...):
    """
    Display popup with OK and """
    ...

def popup_yes_no(*args, title=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., image=..., modal=...):
    """
    Display Popup with Yes and"""
    ...

def popup_get_folder(message, title=..., default_path=..., no_window=..., size=..., button_color=..., background_color=..., text_color=..., icon=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., initial_folder=..., image=..., modal=..., history=..., history_setting_filename=...):
    """
    Display popup with text en"""
    ...

def popup_get_file(message:str=..., title:str=..., default_path:str=..., default_extension=..., save_as:bool=..., multiple_files=..., file_types=..., no_window:bool=..., size=..., button_color=..., background_color=..., text_color=..., icon=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., initial_folder=..., image=..., files_delimiter=..., modal=..., history=..., show_hidden=..., history_setting_filename=...)-> str | None:
    """
    Display popup window with """
    ...

def popup_get_text(message, title=..., default_text=..., password_char=..., size=..., button_color=..., background_color=..., text_color=..., icon=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., image=..., modal=...): # -> None:
    """
    Display Popup with text en"""
    ...

def popup_get_date(start_mon=..., start_day=..., start_year=..., begin_at_sunday_plus=..., no_titlebar=..., title=..., keep_on_top=..., location=..., relative_location=..., close_when_chosen=..., icon=..., locale=..., month_names=..., day_abbreviations=..., modal=...):
    """
    Display a calendar window,"""
    ...

def popup_animated(image_source, message=..., background_color=..., text_color=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., relative_location=..., alpha_channel=..., time_between_frames=..., transparent_color=..., title=..., icon=...): # -> bool | None:
    """
     Show animation one frame """
    ...

def popup_notify(*args, title=..., icon=..., display_duration_in_ms=..., fade_in_duration=..., alpha=..., location=...):
    """
    Displays a "notification w"""
    ...

def popup_menu(window, element, menu_def, title=..., location=...): # -> None:
    """
    Makes a "popup menu"
    """
    ...

def popup_error_with_traceback(title, *messages): # -> None:
    """
    Show an error message and """
    ...

def shell_with_animation(command, args=..., image_source=..., message=..., background_color=..., text_color=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., alpha_channel=..., time_between_frames=..., transparent_color=...): # -> str:
    """
    Execute a "shell command" """
    ...

class UserSettings:
    _default_for_function_interface: UserSettings = ...
    def __init__(self, filename=..., path=..., silent_on_error=..., autosave=..., use_config_file=..., convert_bools_and_none=...) -> None:
        """
        User Settings

     """
        ...
    
    class _SectionDict:
        item_count = ...
        def __init__(self, section_name, section_dict, config, user_settings_parent) -> None:
            """
            The Section Dictio"""
            ...
        
        def __repr__(self): # -> str:
            """
            Converts the setti"""
            ...
        
        def get(self, key, default=...): # -> bool | None:
            """
            Returns the value """
            ...
        
        def set(self, key, value): # -> None:
            ...
        
        def delete_section(self): # -> None:
            ...
        
        def __getitem__(self, item): # -> bool | None:
            ...
        
        def __setitem__(self, item, value): # -> None:
            """
            Enables setting a """
            ...
        
        def __delitem__(self, item): # -> None:
            """
            Delete an individu"""
            ...
        
    
    
    def __repr__(self): # -> str:
        """
        Converts the settings """
        ...
    
    def set_default_value(self, default): # -> None:
        """
        Set the value that wil"""
        ...
    
    def set_location(self, filename=..., path=...): # -> None:
        """
        Sets the location of t"""
        ...
    
    def get_filename(self, filename=..., path=...):
        """
        Sets the filename and """
        ...
    
    def save(self, filename=..., path=...):
        """
        Saves the current sett"""
        ...
    
    def load(self, filename=..., path=...): # -> Any | dict[Unknown, Unknown]:
        """
        Specifies the path and"""
        ...
    
    def delete_file(self, filename=..., path=...):
        """
        Deltes the filename an"""
        ...
    
    def write_new_dictionary(self, settings_dict): # -> None:
        """
        Writes a specified dic"""
        ...
    
    def read(self): # -> Any | dict[Unknown, Unknown]:
        """
        Reads settings file an"""
        ...
    
    def exists(self, filename=..., path=...): # -> bool:
        """
        Check if a particular """
        ...
    
    def delete_entry(self, key, section=...): # -> None:
        """
        Deletes an individual """
        ...
    
    def delete_section(self, section): # -> None:
        """
        Deletes a section with"""
        ...
    
    def set(self, key, value):
        """
        Sets an individual set"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """
        Returns the value of a"""
        ...
    
    def get_dict(self): # -> Any | dict[Unknown, Unknown]:
        """
        Returns the current se"""
        ...
    
    def __setitem__(self, item, value):
        """
        Enables setting a sett"""
        ...
    
    def __getitem__(self, item): # -> Any | None:
        """
        Enables accessing a se"""
        ...
    
    def __delitem__(self, item): # -> Any | None:
        """
        Delete an individual u"""
        ...
    


if UserSettings._default_for_function_interface is None:
    ...
def user_settings_filename(filename=..., path=...):
    """
    Sets the filename and path"""
    ...

def user_settings_delete_filename(filename=..., path=...): # -> None:
    """
    Deltes the filename and pa"""
    ...

def user_settings_set_entry(key, value): # -> None:
    """
    Sets an individual setting"""
    ...

def user_settings_delete_entry(key): # -> None:
    """
    Deletes an individual entr"""
    ...

def user_settings_get_entry(key, default=...): # -> Any | None:
    """
    Returns the value of a spe"""
    ...

def user_settings_save(filename=..., path=...):
    """
    Saves the current settings"""
    ...

def user_settings_load(filename=..., path=...): # -> Any | dict[Unknown, Unknown]:
    """
    Specifies the path and fil"""
    ...

def user_settings_file_exists(filename=..., path=...): # -> bool:
    """
    Determines if a settings f"""
    ...

def user_settings_write_new_dictionary(settings_dict): # -> None:
    """
    Writes a specified diction"""
    ...

def user_settings_silent_on_error(silent_on_error=...): # -> None:
    """
    Used to control the displa"""
    ...

def user_settings(): # -> Any | dict[Unknown, Unknown]:
    """
    Returns the current settin"""
    ...

def user_settings_object(): # -> UserSettings:
    """
    Returns the object that is"""
    ...

def execute_command_subprocess(command, *args, wait=..., cwd=..., pipe_output=..., merge_stderr_with_stdout=..., stdin=...):
    """
    Runs the specified command"""
    ...

def execute_py_file(pyfile, parms=..., cwd=..., interpreter_command=..., wait=..., pipe_output=..., merge_stderr_with_stdout=...):
    """
    Executes a Python file.
 """
    ...

def execute_py_get_interpreter(): # -> str | Any | None:
    """
    Returns the command that i"""
    ...

def execute_editor(file_to_edit, line_number=...):
    """
    Runs the editor that was c"""
    ...

def execute_get_results(subprocess_id, timeout=...):
    """
    Get the text results of a """
    ...

def execute_subprocess_still_running(subprocess_id): # -> bool:
    """
    Returns True is the subpro"""
    ...

def execute_file_explorer(folder_to_open=...): # -> None:
    """
    The global settings has a """
    ...

def execute_find_callers_filename(): # -> str:
    """
    Returns the first filename"""
    ...

MAC_PATCH_DICT = ...
def main_mac_feature_control(): # -> None:
    """
    Window to set settings tha"""
    ...

red_x = ...
COLOR_SCHEME = ...
DEBUGGER_POPOUT_THEME = ...
WIDTH_VARIABLES = ...
WIDTH_RESULTS = ...
WIDTH_WATCHER_VARIABLES = ...
WIDTH_WATCHER_RESULTS = ...
WIDTH_LOCALS = ...
NUM_AUTO_WATCH = ...
MAX_LINES_PER_RESULT_FLOATING = ...
MAX_LINES_PER_RESULT_MAIN = ...
POPOUT_WINDOW_FONT = ...
DEBUGGER_VARIABLE_DETAILS_FONT = ...
class _Debugger:
    debugger = ...
    def __init__(self) -> None:
        ...
    


def show_debugger_window(location=..., *args): # -> Literal[True]:
    """
    Shows the large main debug"""
    ...

def show_debugger_popout_window(location=..., *args): # -> None:
    """
    Shows the smaller "popout""""
    ...

def get_versions(): # -> str:
    """
    Returns a human-readable s"""
    ...

EMOJI_BASE64_FACEPALM = ...
EMOJI_BASE64_FRUSTRATED = ...
EMOJI_BASE64_NOTUNDERSTANDING = ...
EMOJI_BASE64_PONDER = ...
EMOJI_BASE64_SAD = ...
EMOJI_BASE64_SKEPTICAL = ...
EMOJI_BASE64_THINK = ...
EMOJI_BASE64_DREAMING = ...
EMOJI_BASE64_WEARY = ...
EMOJI_BASE64_YIKES = ...
EMOJI_BASE64_HAPPY_GASP = ...
EMOJI_BASE64_HAPPY_IDEA = ...
EMOJI_BASE64_HAPPY_JOY = ...
EMOJI_BASE64_HAPPY_LAUGH = ...
EMOJI_BASE64_HAPPY_STARE = ...
ICON_BUY_ME_A_COFFEE = ...
EMOJI_BASE64_HAPPY_RELIEF = ...
EMOJI_BASE64_HAPPY_BIG_SMILE = ...
EMOJI_BASE64_HAPPY_CONTENT = ...
EMOJI_BASE64_HAPPY_HEARTS = ...
EMOJI_BASE64_HAPPY_THUMBS_UP = ...
EMOJI_BASE64_HAPPY_WINK = ...
EMOJI_BASE64_CRY = ...
EMOJI_BASE64_DEAD = ...
EMOJI_BASE64_FINGERS_CROSSED = ...
EMOJI_BASE64_GUESS = ...
EMOJI_BASE64_CLAP = ...
EMOJI_BASE64_NO_HEAR = ...
EMOJI_BASE64_NO_SEE = ...
EMOJI_BASE64_NO_SPEAK = ...
EMOJI_BASE64_PRAY = ...
EMOJI_BASE64_ZIPPED_SHUT = ...
EMOJI_BASE64_NO_HEAR = ...
EMOJI_BASE64_MIKE = ...
EMOJI_BASE64_SUPERHERO = ...
EMOJI_BASE64_HAPPY_LIST = ...
EMOJI_BASE64_SAD_LIST = ...
EMOJI_BASE64_LIST = ...
HEART_FLAT_BASE64 = ...
HEART_3D_BASE64 = ...
PYTHON_COLORED_HEARTS_BASE64 = ...
RED_X_BASE64 = ...
GREEN_CHECK_BASE64 = ...
def main_open_github_issue(): # -> None:
    ...

main_upgrade_from_github = ...
def main_get_debug_data(suppress_popup=...): # -> str:
    """
    Collect up and display the"""
    ...

def main_global_pysimplegui_settings_erase(): # -> None:
    """
    *** WARNING ***
    Delet"""
    ...

def main_global_pysimplegui_settings(): # -> bool:
    """
    Window to set settings tha"""
    ...

def main_sdk_help(): # -> None:
    """
    Display a window that will"""
    ...

def main(): # -> None:
    """
    The PySimpleGUI "Test Harn"""
    ...

ChangeLookAndFeel = ...
ConvertArgsToSingleString = ...
EasyPrint = ...
Print = ...
eprint = ...
sgprint = ...
PrintClose = ...
sgprint_close = ...
EasyPrintClose = ...
FillFormWithValues = ...
GetComplimentaryHex = ...
ListOfLookAndFeelValues = ...
ObjToString = ...
ObjToStringSingleObj = ...
OneLineProgressMeter = ...
OneLineProgressMeterCancel = ...
Popup = ...
PopupNoFrame = ...
popup_no_frame = ...
PopupNoBorder = ...
popup_no_border = ...
PopupAnnoying = ...
popup_annoying = ...
PopupAnimated = ...
PopupAutoClose = ...
PopupCancel = ...
PopupError = ...
PopupGetFile = ...
PopupGetFolder = ...
PopupGetText = ...
PopupNoButtons = ...
PopupNoTitlebar = ...
PopupNoWait = ...
popup_no_wait = ...
PopupNonBlocking = ...
PopupOK = ...
PopupOKCancel = ...
PopupQuick = ...
PopupQuickMessage = ...
PopupScrolled = ...
PopupTimed = ...
popup_timed = ...
PopupYesNo = ...
RGB = ...
SetGlobalIcon = ...
SetOptions = ...
sprint = ...
ScrolledTextBox = ...
TimerStart = ...
TimerStop = ...
test = ...
sdk_help = ...
pysimplegui_user_settings = ...
if running_trinket():
    USE_CUSTOM_TITLEBAR = ...
if tclversion_detailed.startswith('8.5'):
    ...
if running_windows():
    ...
if __name__ == '__main__':
    ...
